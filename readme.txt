#API: Сервис поиска ближайших машин для перевозки грузов.
Python (Django Rest Framework / FastAPI) на выбор.
DB - Стандартный PostgreSQL.
Приложение должно запускаться в docker-compose без дополнительных доработок
- Порт - 8000
БД по умолчанию должна быть заполнена 20 машинами...
############################
Employer
https://spb.hh.ru/vacancy/79817887?hhtmFrom=chat
WelbeX
############################
Использовал ДРФ, django-tables2 (SingleTableView) и обычные представления с формами.

Машины заполняются 20шт и места отправления и прибытия заполняются командными файлами fill_cars, fill_locations,
перед тем как заполнять места отправления и прибытия, надо запустить файл devider, я так думаю, потому, что много памяти
 займет перебрасывание сразу uszips.csv в базу. Его делим, у меня получилось 68 файлов и их потихоньку вставляем в базу
 с теми полями, которые хотим (у меня минут 15 заполнялось).
 командный файл random_distance.py считает дистанцию между двумя рэндомными точками. Это отправная точка для решения
 будущего функционала.
У обеих моделей сделал поле slug, генерируем его рэндомно, как просили в задании. Потом весь функционал, можно будет
вызывать по этим slug(ам).

Заполняя базу заполняет 500 локаций, иногда выдвал ошибку перегрузки цифр, я поменял поле Кар с децимал на чарфилд,
делает то же самое, но ошибку не пишет (на расчет дистанций эта замена не сказалась) + поставил тайм слип 1 сек -
74 строчка fill_locations, чтобы не перегружался ноут.
1. На эндпоинте funk1/<slug:slug> показывает данные по грузу по слагу
2. На энпоинте funk2/<slug:slug>' вставляем уникальный номер - слаг груза и получаем ближайшие машины (во вьюхе для наглядности
поставил не 450, а 2800, иначе всегда больше будет)
3. На эндпоинте funk3/<slug:slug> "Получение информации о конкретном грузе по ID (локации pick-up, delivery, вес, описание, список номеров ВСЕХ машин
с расстоянием до выбранного груза)" по слагу, информация распечатывается в консоли. Функция def get_queryset(self, **kwargs):
во вьюхе.
4. На эндпоинте car_update/<int:pk> изменяем поля машины, кроме ее слага.
5. Локация машины выводится по введенному слагу на энпоинте car_location/<slug:slug>
6. Редактирование груза по ID (вес, описание); на эндпоинте cargo_update/<int:pk>
7. удаление груза по ID на эндпоинте
_____________________________________________
8. Фильтрация по милям во вьюхе на эндпоинте cargo_list (отрисовывает django-tables2), реализовано во вьюхе:
filterset_fields = ['weigh', f'{distance_to_point(j.latitude_pick_up, j.longtitude_pick_up,
i.latitude, i.longtitude)}']
9. Автоматическое обновление локаций всех машин раз в 3 минуты (локация меняется на другую случайную).
car_create Это реализуется на эндпоинте " ", то есть сразу куда перебрасывается, но не в фоновом режиме. Можно это
исполнить подгрузив селери и прописав таску в файле tasks.py это не сложно, функция написана, в админке надо только
выставить срок 3мин и убрать time.sleep, которые сейчас. селери сама будет считать минуты и выполнять таску. Без селери
или подобной библиотеки нельзя без условия request, даже если мы не пропишем, все равно сработает под условием реквест,
сигнал нужен, ну и вывод машин, переписанный метод лист.

для запуска изпод контейнера docker compose up надо внести 3 изменения в настройках базы, если их там нет:
    port - убрать, пставить вместо localhost - db, имя базы - postgres.
##########################
pokapilu